.\" Man page generated from reStructuredText.
.
.TH "LIT" "1" "2021-09-18" "13" "LLVM"
.SH NAME
lit \- LLVM Integrated Tester
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.SH SYNOPSIS
.sp
\fBlit\fP [\fIoptions\fP] [\fItests\fP]
.SH DESCRIPTION
.sp
\fBlit\fP is a portable tool for executing LLVM and Clang style test
suites, summarizing their results, and providing indication of failures.
\fBlit\fP is designed to be a lightweight testing tool with as simple a
user interface as possible.
.sp
\fBlit\fP should be run with one or more \fItests\fP to run specified on the
command line.  Tests can be either individual test files or directories to
search for tests (see \fI\%TEST DISCOVERY\fP).
.sp
Each specified test will be executed (potentially concurrently) and once all
tests have been run \fBlit\fP will print summary information on the number
of tests which passed or failed (see \fI\%TEST STATUS RESULTS\fP).  The
\fBlit\fP program will execute with a non\-zero exit code if any tests
fail.
.sp
By default \fBlit\fP will use a succinct progress display and will only
print summary information for test failures.  See \fI\%OUTPUT OPTIONS\fP for
options controlling the \fBlit\fP progress display and output.
.sp
\fBlit\fP also includes a number of options for controlling how tests are
executed (specific features may depend on the particular test format).  See
\fI\%EXECUTION OPTIONS\fP for more information.
.sp
Finally, \fBlit\fP also supports additional options for only running a
subset of the options specified on the command line, see
\fI\%SELECTION OPTIONS\fP for more information.
.sp
\fBlit\fP parses options from the environment variable \fBLIT_OPTS\fP after
parsing options from the command line.  \fBLIT_OPTS\fP is primarily useful for
supplementing or overriding the command\-line options supplied to \fBlit\fP
by \fBcheck\fP targets defined by a project’s build system.
.sp
Users interested in the \fBlit\fP architecture or designing a
\fBlit\fP testing implementation should see \fI\%LIT INFRASTRUCTURE\fP\&.
.SH GENERAL OPTIONS
.INDENT 0.0
.TP
.B \-h, \-\-help
Show the \fBlit\fP help message.
.UNINDENT
.INDENT 0.0
.TP
.B \-j N, \-\-workers=N
Run \fBN\fP tests in parallel.  By default, this is automatically chosen to
match the number of detected available CPUs.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-config\-prefix=NAME
Search for \fB\fINAME\fP\fP\fB\&.cfg\fP and \fB\fINAME\fP\fP\fB\&.site.cfg\fP when searching for
test suites, instead of \fBlit.cfg\fP and \fBlit.site.cfg\fP\&.
.UNINDENT
.INDENT 0.0
.TP
.B \-D NAME[=VALUE], \-\-param NAME[=VALUE]
Add a user defined parameter \fBNAME\fP with the given \fBVALUE\fP (or the empty
string if not given).  The meaning and use of these parameters is test suite
dependent.
.UNINDENT
.SH OUTPUT OPTIONS
.INDENT 0.0
.TP
.B \-q, \-\-quiet
Suppress any output except for test failures.
.UNINDENT
.INDENT 0.0
.TP
.B \-s, \-\-succinct
Show less output, for example don’t show information on tests that pass.
Also show a progress bar, unless \fB\-\-no\-progress\-bar\fP is specified.
.UNINDENT
.INDENT 0.0
.TP
.B \-v, \-\-verbose
Show more information on test failures, for example the entire test output
instead of just the test result.
.UNINDENT
.INDENT 0.0
.TP
.B \-vv, \-\-echo\-all\-commands
Echo all commands to stdout, as they are being executed.
This can be valuable for debugging test failures, as the last echoed command
will be the one which has failed.
\fBlit\fP normally inserts a no\-op command (\fB:\fP in the case of bash)
with argument \fB\(aqRUN: at line N\(aq\fP before each command pipeline, and this
option also causes those no\-op commands to be echoed to stdout to help you
locate the source line of the failed command.
This option implies \fB\-\-verbose\fP\&.
.UNINDENT
.INDENT 0.0
.TP
.B \-a, \-\-show\-all
Show more information about all tests, for example the entire test
commandline and output.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-no\-progress\-bar
Do not use curses based progress bar.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-show\-unsupported
Show the names of unsupported tests.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-show\-xfail
Show the names of tests that were expected to fail.
.UNINDENT
.SH EXECUTION OPTIONS
.INDENT 0.0
.TP
.B \-\-path=PATH
Specify an additional \fBPATH\fP to use when searching for executables in tests.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-vg
Run individual tests under valgrind (using the memcheck tool).  The
\fB\-\-error\-exitcode\fP argument for valgrind is used so that valgrind failures
will cause the program to exit with a non\-zero status.
.sp
When this option is enabled, \fBlit\fP will also automatically provide a
“\fBvalgrind\fP” feature that can be used to conditionally disable (or expect
failure in) certain tests.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-vg\-arg=ARG
When \fI\%\-\-vg\fP is used, specify an additional argument to pass to
\fBvalgrind\fP itself.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-vg\-leak
When \fI\%\-\-vg\fP is used, enable memory leak checks.  When this option is
enabled, \fBlit\fP will also automatically provide a “\fBvg_leak\fP”
feature that can be used to conditionally disable (or expect failure in)
certain tests.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-time\-tests
Track the wall time individual tests take to execute and includes the results
in the summary output.  This is useful for determining which tests in a test
suite take the most time to execute.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-ignore\-fail
Exit with status zero even if some tests fail.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-no\-indirectly\-run\-check
Do not error if a test would not be run if the user had specified the
containing directory instead of naming the test directly.
.UNINDENT
.SH SELECTION OPTIONS
.sp
By default, \fIlit\fP will run failing tests first, then run tests in descending
execution time order to optimize concurrency.  The execution order can be
changed using the \fI\%\-\-order\fP option.
.sp
The timing data is stored in the \fItest_exec_root\fP in a file named
\fI\&.lit_test_times.txt\fP\&. If this file does not exist, then \fIlit\fP checks the
\fItest_source_root\fP for the file to optionally accelerate clean builds.
.INDENT 0.0
.TP
.B \-\-shuffle
Run the tests in a random order, not failing/slowest first. Deprecated,
use \fI\%\-\-order\fP instead.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-max\-failures N
Stop execution after the given number \fBN\fP of failures.
An integer argument should be passed on the command line
prior to execution.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-max\-tests=N
Run at most \fBN\fP tests and then terminate.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-max\-time=N
Spend at most \fBN\fP seconds (approximately) running tests and then terminate.
Note that this is not an alias for \fI\%\-\-timeout\fP; the two are
different kinds of maximums.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-num\-shards=M
Divide the set of selected tests into \fBM\fP equal\-sized subsets or
“shards”, and run only one of them.  Must be used with the
\fB\-\-run\-shard=N\fP option, which selects the shard to run. The environment
variable \fBLIT_NUM_SHARDS\fP can also be used in place of this
option. These two options provide a coarse mechanism for partitioning large
testsuites, for parallel execution on separate machines (say in a large
testing farm).
.UNINDENT
.INDENT 0.0
.TP
.B \-\-order={lexical,random,smart}
Define the order in which tests are run. The supported values are:
.INDENT 7.0
.IP \(bu 2
lexical \- tests will be run in lexical order according to the test file
path. This option is useful when predictable test order is desired.
.IP \(bu 2
random \- tests will be run in random order.
.IP \(bu 2
smart \- tests that failed previously will be run first, then the remaining
tests, all in descending execution time order. This is the default as it
optimizes concurrency.
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B \-\-run\-shard=N
Select which shard to run, assuming the \fB\-\-num\-shards=M\fP option was
provided. The two options must be used together, and the value of \fBN\fP
must be in the range \fB1..M\fP\&. The environment variable
\fBLIT_RUN_SHARD\fP can also be used in place of this option.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-timeout=N
Spend at most \fBN\fP seconds (approximately) running each individual test.
\fB0\fP means no time limit, and \fB0\fP is the default. Note that this is not an
alias for \fI\%\-\-max\-time\fP; the two are different kinds of maximums.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-filter=REGEXP
Run only those tests whose name matches the regular expression specified in
\fBREGEXP\fP\&. The environment variable \fBLIT_FILTER\fP can be also used in place
of this option, which is especially useful in environments where the call
to \fBlit\fP is issued indirectly.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-filter\-out=REGEXP
Filter out those tests whose name matches the regular expression specified in
\fBREGEXP\fP\&. The environment variable \fBLIT_FILTER_OUT\fP can be also used in
place of this option, which is especially useful in environments where the
call to \fBlit\fP is issued indirectly.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-xfail=LIST
Treat those tests whose name is in the semicolon separated list \fBLIST\fP as
\fBXFAIL\fP\&. This can be helpful when one does not want to modify the test
suite. The environment variable \fBLIT_XFAIL\fP can be also used in place of
this option, which is especially useful in environments where the call to
\fBlit\fP is issued indirectly.
.sp
A test name can specified as a file name relative to the test suite directory.
For example:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
LIT_XFAIL="affinity/kmp\-hw\-subset.c;offloading/memory_manager.cpp"
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
In this case, all of the following tests are treated as \fBXFAIL\fP:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
libomp :: affinity/kmp\-hw\-subset.c
libomptarget :: nvptx64\-nvidia\-cuda :: offloading/memory_manager.cpp
libomptarget :: x86_64\-pc\-linux\-gnu :: offloading/memory_manager.cpp
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Alternatively, a test name can be specified as the full test name
reported in LIT output.  For example, we can adjust the previous
example not to treat the \fBnvptx64\-nvidia\-cuda\fP version of
\fBoffloading/memory_manager.cpp\fP as XFAIL:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
LIT_XFAIL="affinity/kmp\-hw\-subset.c;libomptarget :: x86_64\-pc\-linux\-gnu :: offloading/memory_manager.cpp"
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B \-\-xfail\-not=LIST
Do not treat the specified tests as \fBXFAIL\fP\&.  The environment variable
\fBLIT_XFAIL_NOT\fP can also be used in place of this option.  The syntax is the
same as for \fI\%\-\-xfail\fP and \fBLIT_XFAIL\fP\&.  \fI\%\-\-xfail\-not\fP and
\fBLIT_XFAIL_NOT\fP always override all other \fBXFAIL\fP specifications,
including an \fI\%\-\-xfail\fP appearing later on the command line.  The
primary purpose is to suppress an \fBXPASS\fP result without modifying a test
case that uses the \fBXFAIL\fP directive.
.UNINDENT
.SH ADDITIONAL OPTIONS
.INDENT 0.0
.TP
.B \-\-debug
Run \fBlit\fP in debug mode, for debugging configuration issues and
\fBlit\fP itself.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-show\-suites
List the discovered test suites and exit.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-show\-tests
List all of the discovered tests and exit.
.UNINDENT
.SH EXIT STATUS
.sp
\fBlit\fP will exit with an exit code of 1 if there are any FAIL or XPASS
results.  Otherwise, it will exit with the status 0.  Other exit codes are used
for non\-test related failures (for example a user error or an internal program
error).
.SH TEST DISCOVERY
.sp
The inputs passed to \fBlit\fP can be either individual tests, or entire
directories or hierarchies of tests to run.  When \fBlit\fP starts up, the
first thing it does is convert the inputs into a complete list of tests to run
as part of \fItest discovery\fP\&.
.sp
In the \fBlit\fP model, every test must exist inside some \fItest suite\fP\&.
\fBlit\fP resolves the inputs specified on the command line to test suites
by searching upwards from the input path until it finds a \fBlit.cfg\fP or
\fBlit.site.cfg\fP file.  These files serve as both a marker of test suites
and as configuration files which \fBlit\fP loads in order to understand
how to find and run the tests inside the test suite.
.sp
Once \fBlit\fP has mapped the inputs into test suites it traverses the
list of inputs adding tests for individual files and recursively searching for
tests in directories.
.sp
This behavior makes it easy to specify a subset of tests to run, while still
allowing the test suite configuration to control exactly how tests are
interpreted.  In addition, \fBlit\fP always identifies tests by the test
suite they are in, and their relative path inside the test suite.  For
appropriately configured projects, this allows \fBlit\fP to provide
convenient and flexible support for out\-of\-tree builds.
.SH TEST STATUS RESULTS
.sp
Each test ultimately produces one of the following eight results:
.sp
\fBPASS\fP
.INDENT 0.0
.INDENT 3.5
The test succeeded.
.UNINDENT
.UNINDENT
.sp
\fBFLAKYPASS\fP
.INDENT 0.0
.INDENT 3.5
The test succeeded after being re\-run more than once. This only applies to
tests containing an \fBALLOW_RETRIES:\fP annotation.
.UNINDENT
.UNINDENT
.sp
\fBXFAIL\fP
.INDENT 0.0
.INDENT 3.5
The test failed, but that is expected.  This is used for test formats which allow
specifying that a test does not currently work, but wish to leave it in the test
suite.
.UNINDENT
.UNINDENT
.sp
\fBXPASS\fP
.INDENT 0.0
.INDENT 3.5
The test succeeded, but it was expected to fail.  This is used for tests which
were specified as expected to fail, but are now succeeding (generally because
the feature they test was broken and has been fixed).
.UNINDENT
.UNINDENT
.sp
\fBFAIL\fP
.INDENT 0.0
.INDENT 3.5
The test failed.
.UNINDENT
.UNINDENT
.sp
\fBUNRESOLVED\fP
.INDENT 0.0
.INDENT 3.5
The test result could not be determined.  For example, this occurs when the test
could not be run, the test itself is invalid, or the test was interrupted.
.UNINDENT
.UNINDENT
.sp
\fBUNSUPPORTED\fP
.INDENT 0.0
.INDENT 3.5
The test is not supported in this environment.  This is used by test formats
which can report unsupported tests.
.UNINDENT
.UNINDENT
.sp
\fBTIMEOUT\fP
.INDENT 0.0
.INDENT 3.5
The test was run, but it timed out before it was able to complete. This is
considered a failure.
.UNINDENT
.UNINDENT
.sp
Depending on the test format tests may produce additional information about
their status (generally only for failures).  See the \fI\%OUTPUT OPTIONS\fP
section for more information.
.SH LIT INFRASTRUCTURE
.sp
This section describes the \fBlit\fP testing architecture for users interested in
creating a new \fBlit\fP testing implementation, or extending an existing one.
.sp
\fBlit\fP proper is primarily an infrastructure for discovering and running
arbitrary tests, and to expose a single convenient interface to these
tests. \fBlit\fP itself doesn’t know how to run tests, rather this logic is
defined by \fItest suites\fP\&.
.SS TEST SUITES
.sp
As described in \fI\%TEST DISCOVERY\fP, tests are always located inside a \fItest
suite\fP\&.  Test suites serve to define the format of the tests they contain, the
logic for finding those tests, and any additional information to run the tests.
.sp
\fBlit\fP identifies test suites as directories containing \fBlit.cfg\fP or
\fBlit.site.cfg\fP files (see also \fI\%\-\-config\-prefix\fP).  Test suites are
initially discovered by recursively searching up the directory hierarchy for
all the input files passed on the command line.  You can use
\fI\%\-\-show\-suites\fP to display the discovered test suites at startup.
.sp
Once a test suite is discovered, its config file is loaded.  Config files
themselves are Python modules which will be executed.  When the config file is
executed, two important global variables are predefined:
.sp
\fBlit_config\fP
.INDENT 0.0
.INDENT 3.5
The global \fBlit\fP configuration object (a \fILitConfig\fP instance), which defines
the builtin test formats, global configuration parameters, and other helper
routines for implementing test configurations.
.UNINDENT
.UNINDENT
.sp
\fBconfig\fP
.INDENT 0.0
.INDENT 3.5
This is the config object (a \fITestingConfig\fP instance) for the test suite,
which the config file is expected to populate.  The following variables are also
available on the \fIconfig\fP object, some of which must be set by the config and
others are optional or predefined:
.sp
\fBname\fP \fI[required]\fP The name of the test suite, for use in reports and
diagnostics.
.sp
\fBtest_format\fP \fI[required]\fP The test format object which will be used to
discover and run tests in the test suite.  Generally this will be a builtin test
format available from the \fIlit.formats\fP module.
.sp
\fBtest_source_root\fP The filesystem path to the test suite root.  For out\-of\-dir
builds this is the directory that will be scanned for tests.
.sp
\fBtest_exec_root\fP For out\-of\-dir builds, the path to the test suite root inside
the object directory.  This is where tests will be run and temporary output files
placed.
.sp
\fBenvironment\fP A dictionary representing the environment to use when executing
tests in the suite.
.sp
\fBstandalone_tests\fP When true, mark a directory with tests expected to be run
standalone. Test discovery is disabled for that directory and
\fI–no\-indirectly\-run\-check\fP is in effect. \fIlit.suffixes\fP and \fIlit.excludes\fP
must be empty when this variable is true.
.sp
\fBsuffixes\fP For \fBlit\fP test formats which scan directories for tests, this
variable is a list of suffixes to identify test files.  Used by: \fIShTest\fP\&.
.sp
\fBsubstitutions\fP For \fBlit\fP test formats which substitute variables into a test
script, the list of substitutions to perform.  Used by: \fIShTest\fP\&.
.sp
\fBunsupported\fP Mark an unsupported directory, all tests within it will be
reported as unsupported.  Used by: \fIShTest\fP\&.
.sp
\fBparent\fP The parent configuration, this is the config object for the directory
containing the test suite, or None.
.sp
\fBroot\fP The root configuration.  This is the top\-most \fBlit\fP configuration in
the project.
.sp
\fBpipefail\fP Normally a test using a shell pipe fails if any of the commands
on the pipe fail. If this is not desired, setting this variable to false
makes the test fail only if the last command in the pipe fails.
.sp
\fBavailable_features\fP A set of features that can be used in \fIXFAIL\fP,
\fIREQUIRES\fP, and \fIUNSUPPORTED\fP directives.
.UNINDENT
.UNINDENT
.SS TEST DISCOVERY
.sp
Once test suites are located, \fBlit\fP recursively traverses the source
directory (following \fItest_source_root\fP) looking for tests.  When \fBlit\fP
enters a sub\-directory, it first checks to see if a nested test suite is
defined in that directory.  If so, it loads that test suite recursively,
otherwise it instantiates a local test config for the directory (see
\fI\%LOCAL CONFIGURATION FILES\fP).
.sp
Tests are identified by the test suite they are contained within, and the
relative path inside that suite.  Note that the relative path may not refer to
an actual file on disk; some test formats (such as \fIGoogleTest\fP) define
“virtual tests” which have a path that contains both the path to the actual
test file and a subpath to identify the virtual test.
.SS LOCAL CONFIGURATION FILES
.sp
When \fBlit\fP loads a subdirectory in a test suite, it instantiates a
local test configuration by cloning the configuration for the parent directory
— the root of this configuration chain will always be a test suite.  Once the
test configuration is cloned \fBlit\fP checks for a \fIlit.local.cfg\fP file
in the subdirectory.  If present, this file will be loaded and can be used to
specialize the configuration for each individual directory.  This facility can
be used to define subdirectories of optional tests, or to change other
configuration parameters — for example, to change the test format, or the
suffixes which identify test files.
.SS SUBSTITUTIONS
.sp
\fBlit\fP allows patterns to be substituted inside RUN commands. It also
provides the following base set of substitutions, which are defined in
TestRunner.py:
.INDENT 0.0
.INDENT 3.5
.TS
center;
|l|l|.
_
T{
Macro
T}	T{
Substitution
T}
_
T{
%s
T}	T{
source path (path to the file currently being run)
T}
_
T{
%S
T}	T{
source dir (directory of the file currently being run)
T}
_
T{
%p
T}	T{
same as %S
T}
_
T{
%{pathsep}
T}	T{
path separator
T}
_
T{
%t
T}	T{
temporary file name unique to the test
T}
_
T{
%basename_t
T}	T{
The last path component of %t but without the \fB\&.tmp\fP extension
T}
_
T{
%T
T}	T{
parent directory of %t (not unique, deprecated, do not use)
T}
_
T{
%%
T}	T{
%
T}
_
T{
%/s
T}	T{
%s but \fB\e\fP is replaced by \fB/\fP
T}
_
T{
%/S
T}	T{
%S but \fB\e\fP is replaced by \fB/\fP
T}
_
T{
%/p
T}	T{
%p but \fB\e\fP is replaced by \fB/\fP
T}
_
T{
%/t
T}	T{
%t but \fB\e\fP is replaced by \fB/\fP
T}
_
T{
%/T
T}	T{
%T but \fB\e\fP is replaced by \fB/\fP
T}
_
T{
%{/s:regex_replacement}
T}	T{
%/s but escaped for use in the replacement of a \fBs@@@\fP command in sed
T}
_
T{
%{/S:regex_replacement}
T}	T{
%/S but escaped for use in the replacement of a \fBs@@@\fP command in sed
T}
_
T{
%{/p:regex_replacement}
T}	T{
%/p but escaped for use in the replacement of a \fBs@@@\fP command in sed
T}
_
T{
%{/t:regex_replacement}
T}	T{
%/t but escaped for use in the replacement of a \fBs@@@\fP command in sed
T}
_
T{
%{/T:regex_replacement}
T}	T{
%/T but escaped for use in the replacement of a \fBs@@@\fP command in sed
T}
_
T{
%:s
T}	T{
On Windows, %/s but a \fB:\fP is removed if its the second character.
Otherwise, %s but with a single leading \fB/\fP removed.
T}
_
T{
%:S
T}	T{
On Windows, %/S but a \fB:\fP is removed if its the second character.
Otherwise, %S but with a single leading \fB/\fP removed.
T}
_
T{
%:p
T}	T{
On Windows, %/p but a \fB:\fP is removed if its the second character.
Otherwise, %p but with a single leading \fB/\fP removed.
T}
_
T{
%:t
T}	T{
On Windows, %/t but a \fB:\fP is removed if its the second character.
Otherwise, %t but with a single leading \fB/\fP removed.
T}
_
T{
%:T
T}	T{
On Windows, %/T but a \fB:\fP is removed if its the second character.
Otherwise, %T but with a single leading \fB/\fP removed.
T}
_
.TE
.UNINDENT
.UNINDENT
.sp
Other substitutions are provided that are variations on this base set and
further substitution patterns can be defined by each test module. See the
modules \fI\%LOCAL CONFIGURATION FILES\fP\&.
.sp
By default, substitutions are expanded exactly once, so that if e.g. a
substitution \fB%build\fP is defined in top of another substitution \fB%cxx\fP,
\fB%build\fP will expand to \fB%cxx\fP textually, not to what \fB%cxx\fP expands to.
However, if the \fBrecursiveExpansionLimit\fP property of the \fBTestingConfig\fP
is set to a non\-negative integer, substitutions will be expanded recursively
until that limit is reached. It is an error if the limit is reached and
expanding substitutions again would yield a different result.
.sp
More detailed information on substitutions can be found in the
\&../TestingGuide\&.
.SS TEST RUN OUTPUT FORMAT
.sp
The \fBlit\fP output for a test run conforms to the following schema, in
both short and verbose modes (although in short mode no PASS lines will be
shown).  This schema has been chosen to be relatively easy to reliably parse by
a machine (for example in buildbot log scraping), and for other tools to
generate.
.sp
Each test result is expected to appear on a line that matches:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
<result code>: <test name> (<progress info>)
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
where \fB<result\-code>\fP is a standard test result such as PASS, FAIL, XFAIL,
XPASS, UNRESOLVED, or UNSUPPORTED.  The performance result codes of IMPROVED and
REGRESSED are also allowed.
.sp
The \fB<test name>\fP field can consist of an arbitrary string containing no
newline.
.sp
The \fB<progress info>\fP field can be used to report progress information such
as (1/300) or can be empty, but even when empty the parentheses are required.
.sp
Each test result may include additional (multiline) log information in the
following format:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
<log delineator> TEST \(aq(<test name>)\(aq <trailing delineator>
\&... log message ...
<log delineator>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
where \fB<test name>\fP should be the name of a preceding reported test, \fB<log
delineator>\fP is a string of “*” characters \fIat least\fP four characters long
(the recommended length is 20), and \fB<trailing delineator>\fP is an arbitrary
(unparsed) string.
.sp
The following is an example of a test run output which consists of four tests A,
B, C, and D, and a log message for the failing test C:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
PASS: A (1 of 4)
PASS: B (2 of 4)
FAIL: C (3 of 4)
******************** TEST \(aqC\(aq FAILED ********************
Test \(aqC\(aq failed as a result of exit code 1.
********************
PASS: D (4 of 4)
.ft P
.fi
.UNINDENT
.UNINDENT
.SS LIT EXAMPLE TESTS
.sp
The \fBlit\fP distribution contains several example implementations of
test suites in the \fIExampleTests\fP directory.
.SH SEE ALSO
.sp
valgrind(1)
.SH AUTHOR
Maintained by the LLVM Team (https://llvm.org/).
.SH COPYRIGHT
2003-2021, LLVM Project
.\" Generated by docutils manpage writer.
.
